# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorDetailsDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_ip': 'str',
        'channel': 'str',
        'name': 'list[str]',
        'card_type': 'str',
        'card_number': 'str',
        'destination_code': 'str',
        'checkin': 'list[str]',
        'checkout': 'list[str]',
        'non_field_errors': 'list[str]'
    }

    attribute_map = {
        'client_ip': 'client_ip',
        'channel': 'channel',
        'name': 'name',
        'card_type': 'card_type',
        'card_number': 'card_number',
        'destination_code': 'destination_code',
        'checkin': 'checkin',
        'checkout': 'checkout',
        'non_field_errors': 'non_field_errors'
    }

    def __init__(self, client_ip=None, channel=None, name=None, card_type=None, card_number=None, destination_code=None, checkin=None, checkout=None, non_field_errors=None):
        """
        ErrorDetailsDetail - a model defined in Swagger
        """

        self._client_ip = None
        self._channel = None
        self._name = None
        self._card_type = None
        self._card_number = None
        self._destination_code = None
        self._checkin = None
        self._checkout = None
        self._non_field_errors = None

        if client_ip is not None:
          self.client_ip = client_ip
        if channel is not None:
          self.channel = channel
        if name is not None:
          self.name = name
        if card_type is not None:
          self.card_type = card_type
        if card_number is not None:
          self.card_number = card_number
        if destination_code is not None:
          self.destination_code = destination_code
        if checkin is not None:
          self.checkin = checkin
        if checkout is not None:
          self.checkout = checkout
        if non_field_errors is not None:
          self.non_field_errors = non_field_errors

    @property
    def client_ip(self):
        """
        Gets the client_ip of this ErrorDetailsDetail.

        :return: The client_ip of this ErrorDetailsDetail.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """
        Sets the client_ip of this ErrorDetailsDetail.

        :param client_ip: The client_ip of this ErrorDetailsDetail.
        :type: str
        """

        self._client_ip = client_ip

    @property
    def channel(self):
        """
        Gets the channel of this ErrorDetailsDetail.

        :return: The channel of this ErrorDetailsDetail.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """
        Sets the channel of this ErrorDetailsDetail.

        :param channel: The channel of this ErrorDetailsDetail.
        :type: str
        """

        self._channel = channel

    @property
    def name(self):
        """
        Gets the name of this ErrorDetailsDetail.

        :return: The name of this ErrorDetailsDetail.
        :rtype: list[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ErrorDetailsDetail.

        :param name: The name of this ErrorDetailsDetail.
        :type: list[str]
        """

        self._name = name

    @property
    def card_type(self):
        """
        Gets the card_type of this ErrorDetailsDetail.

        :return: The card_type of this ErrorDetailsDetail.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this ErrorDetailsDetail.

        :param card_type: The card_type of this ErrorDetailsDetail.
        :type: str
        """

        self._card_type = card_type

    @property
    def card_number(self):
        """
        Gets the card_number of this ErrorDetailsDetail.

        :return: The card_number of this ErrorDetailsDetail.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """
        Sets the card_number of this ErrorDetailsDetail.

        :param card_number: The card_number of this ErrorDetailsDetail.
        :type: str
        """

        self._card_number = card_number

    @property
    def destination_code(self):
        """
        Gets the destination_code of this ErrorDetailsDetail.

        :return: The destination_code of this ErrorDetailsDetail.
        :rtype: str
        """
        return self._destination_code

    @destination_code.setter
    def destination_code(self, destination_code):
        """
        Sets the destination_code of this ErrorDetailsDetail.

        :param destination_code: The destination_code of this ErrorDetailsDetail.
        :type: str
        """

        self._destination_code = destination_code

    @property
    def checkin(self):
        """
        Gets the checkin of this ErrorDetailsDetail.

        :return: The checkin of this ErrorDetailsDetail.
        :rtype: list[str]
        """
        return self._checkin

    @checkin.setter
    def checkin(self, checkin):
        """
        Sets the checkin of this ErrorDetailsDetail.

        :param checkin: The checkin of this ErrorDetailsDetail.
        :type: list[str]
        """

        self._checkin = checkin

    @property
    def checkout(self):
        """
        Gets the checkout of this ErrorDetailsDetail.

        :return: The checkout of this ErrorDetailsDetail.
        :rtype: list[str]
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """
        Sets the checkout of this ErrorDetailsDetail.

        :param checkout: The checkout of this ErrorDetailsDetail.
        :type: list[str]
        """

        self._checkout = checkout

    @property
    def non_field_errors(self):
        """
        Gets the non_field_errors of this ErrorDetailsDetail.

        :return: The non_field_errors of this ErrorDetailsDetail.
        :rtype: list[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """
        Sets the non_field_errors of this ErrorDetailsDetail.

        :param non_field_errors: The non_field_errors of this ErrorDetailsDetail.
        :type: list[str]
        """

        self._non_field_errors = non_field_errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ErrorDetailsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
