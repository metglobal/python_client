# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'offer': 'bool',
        'pay_at_hotel': 'bool',
        'nonrefundable': 'bool',
        'price': 'str',
        'currency': 'str',
        'rooms': 'list[Room]',
        'supports_cancellation': 'bool',
        'hotel_currency': 'str',
        'hotel_price': 'str',
        'meal_type': 'str',
        'policies': 'list[Policy]',
        'minimum_selling_price': 'str',
        'view': 'bool'
    }

    attribute_map = {
        'code': 'code',
        'offer': 'offer',
        'pay_at_hotel': 'pay_at_hotel',
        'nonrefundable': 'nonrefundable',
        'price': 'price',
        'currency': 'currency',
        'rooms': 'rooms',
        'supports_cancellation': 'supports_cancellation',
        'hotel_currency': 'hotel_currency',
        'hotel_price': 'hotel_price',
        'meal_type': 'meal_type',
        'policies': 'policies',
        'minimum_selling_price': 'minimum_selling_price',
        'view': 'view'
    }

    def __init__(self, code=None, offer=None, pay_at_hotel=None, nonrefundable=None, price=None, currency=None, rooms=None, supports_cancellation=None, hotel_currency=None, hotel_price=None, meal_type=None, policies=None, minimum_selling_price=None, view=None):
        """
        Product - a model defined in Swagger
        """

        self._code = None
        self._offer = None
        self._pay_at_hotel = None
        self._nonrefundable = None
        self._price = None
        self._currency = None
        self._rooms = None
        self._supports_cancellation = None
        self._hotel_currency = None
        self._hotel_price = None
        self._meal_type = None
        self._policies = None
        self._minimum_selling_price = None
        self._view = None

        if code is not None:
          self.code = code
        if offer is not None:
          self.offer = offer
        if pay_at_hotel is not None:
          self.pay_at_hotel = pay_at_hotel
        if nonrefundable is not None:
          self.nonrefundable = nonrefundable
        if price is not None:
          self.price = price
        if currency is not None:
          self.currency = currency
        if rooms is not None:
          self.rooms = rooms
        if supports_cancellation is not None:
          self.supports_cancellation = supports_cancellation
        if hotel_currency is not None:
          self.hotel_currency = hotel_currency
        if hotel_price is not None:
          self.hotel_price = hotel_price
        if meal_type is not None:
          self.meal_type = meal_type
        if policies is not None:
          self.policies = policies
        if minimum_selling_price is not None:
          self.minimum_selling_price = minimum_selling_price
        if view is not None:
          self.view = view

    @property
    def code(self):
        """
        Gets the code of this Product.
        product code

        :return: The code of this Product.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Product.
        product code

        :param code: The code of this Product.
        :type: str
        """

        self._code = code

    @property
    def offer(self):
        """
        Gets the offer of this Product.

        :return: The offer of this Product.
        :rtype: bool
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """
        Sets the offer of this Product.

        :param offer: The offer of this Product.
        :type: bool
        """

        self._offer = offer

    @property
    def pay_at_hotel(self):
        """
        Gets the pay_at_hotel of this Product.

        :return: The pay_at_hotel of this Product.
        :rtype: bool
        """
        return self._pay_at_hotel

    @pay_at_hotel.setter
    def pay_at_hotel(self, pay_at_hotel):
        """
        Sets the pay_at_hotel of this Product.

        :param pay_at_hotel: The pay_at_hotel of this Product.
        :type: bool
        """

        self._pay_at_hotel = pay_at_hotel

    @property
    def nonrefundable(self):
        """
        Gets the nonrefundable of this Product.

        :return: The nonrefundable of this Product.
        :rtype: bool
        """
        return self._nonrefundable

    @nonrefundable.setter
    def nonrefundable(self, nonrefundable):
        """
        Sets the nonrefundable of this Product.

        :param nonrefundable: The nonrefundable of this Product.
        :type: bool
        """

        self._nonrefundable = nonrefundable

    @property
    def price(self):
        """
        Gets the price of this Product.

        :return: The price of this Product.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Product.

        :param price: The price of this Product.
        :type: str
        """

        self._price = price

    @property
    def currency(self):
        """
        Gets the currency of this Product.

        :return: The currency of this Product.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Product.

        :param currency: The currency of this Product.
        :type: str
        """
        allowed_values = ["USD", "EUR", "GBP", "TRY", "AED"]
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def rooms(self):
        """
        Gets the rooms of this Product.

        :return: The rooms of this Product.
        :rtype: list[Room]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this Product.

        :param rooms: The rooms of this Product.
        :type: list[Room]
        """

        self._rooms = rooms

    @property
    def supports_cancellation(self):
        """
        Gets the supports_cancellation of this Product.

        :return: The supports_cancellation of this Product.
        :rtype: bool
        """
        return self._supports_cancellation

    @supports_cancellation.setter
    def supports_cancellation(self, supports_cancellation):
        """
        Sets the supports_cancellation of this Product.

        :param supports_cancellation: The supports_cancellation of this Product.
        :type: bool
        """

        self._supports_cancellation = supports_cancellation

    @property
    def hotel_currency(self):
        """
        Gets the hotel_currency of this Product.

        :return: The hotel_currency of this Product.
        :rtype: str
        """
        return self._hotel_currency

    @hotel_currency.setter
    def hotel_currency(self, hotel_currency):
        """
        Sets the hotel_currency of this Product.

        :param hotel_currency: The hotel_currency of this Product.
        :type: str
        """

        self._hotel_currency = hotel_currency

    @property
    def hotel_price(self):
        """
        Gets the hotel_price of this Product.

        :return: The hotel_price of this Product.
        :rtype: str
        """
        return self._hotel_price

    @hotel_price.setter
    def hotel_price(self, hotel_price):
        """
        Sets the hotel_price of this Product.

        :param hotel_price: The hotel_price of this Product.
        :type: str
        """

        self._hotel_price = hotel_price

    @property
    def meal_type(self):
        """
        Gets the meal_type of this Product.

        :return: The meal_type of this Product.
        :rtype: str
        """
        return self._meal_type

    @meal_type.setter
    def meal_type(self, meal_type):
        """
        Sets the meal_type of this Product.

        :param meal_type: The meal_type of this Product.
        :type: str
        """

        self._meal_type = meal_type

    @property
    def policies(self):
        """
        Gets the policies of this Product.

        :return: The policies of this Product.
        :rtype: list[Policy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """
        Sets the policies of this Product.

        :param policies: The policies of this Product.
        :type: list[Policy]
        """

        self._policies = policies

    @property
    def minimum_selling_price(self):
        """
        Gets the minimum_selling_price of this Product.

        :return: The minimum_selling_price of this Product.
        :rtype: str
        """
        return self._minimum_selling_price

    @minimum_selling_price.setter
    def minimum_selling_price(self, minimum_selling_price):
        """
        Sets the minimum_selling_price of this Product.

        :param minimum_selling_price: The minimum_selling_price of this Product.
        :type: str
        """

        self._minimum_selling_price = minimum_selling_price

    @property
    def view(self):
        """
        Gets the view of this Product.

        :return: The view of this Product.
        :rtype: bool
        """
        return self._view

    @view.setter
    def view(self, view):
        """
        Sets the view of this Product.

        :param view: The view of this Product.
        :type: bool
        """

        self._view = view

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
