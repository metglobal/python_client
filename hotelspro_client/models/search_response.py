# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'code': 'str',
        'next_page_code': 'str',
        'max_wait': 'str',
        'response_time': 'str',
        'results': 'list[Results]'
    }

    attribute_map = {
        'count': 'count',
        'code': 'code',
        'next_page_code': 'next_page_code',
        'max_wait': 'max_wait',
        'response_time': 'response_time',
        'results': 'results'
    }

    def __init__(self, count=None, code=None, next_page_code=None, max_wait=None, response_time=None, results=None):
        """
        SearchResponse - a model defined in Swagger
        """

        self._count = None
        self._code = None
        self._next_page_code = None
        self._max_wait = None
        self._response_time = None
        self._results = None

        self.count = count
        self.code = code
        if next_page_code is not None:
          self.next_page_code = next_page_code
        self.max_wait = max_wait
        self.response_time = response_time
        self.results = results

    @property
    def count(self):
        """
        Gets the count of this SearchResponse.
        number of returned hotel

        :return: The count of this SearchResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this SearchResponse.
        number of returned hotel

        :param count: The count of this SearchResponse.
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def code(self):
        """
        Gets the code of this SearchResponse.
        search code

        :return: The code of this SearchResponse.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this SearchResponse.
        search code

        :param code: The code of this SearchResponse.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def next_page_code(self):
        """
        Gets the next_page_code of this SearchResponse.
        next page code

        :return: The next_page_code of this SearchResponse.
        :rtype: str
        """
        return self._next_page_code

    @next_page_code.setter
    def next_page_code(self, next_page_code):
        """
        Sets the next_page_code of this SearchResponse.
        next page code

        :param next_page_code: The next_page_code of this SearchResponse.
        :type: str
        """

        self._next_page_code = next_page_code

    @property
    def max_wait(self):
        """
        Gets the max_wait of this SearchResponse.

        :return: The max_wait of this SearchResponse.
        :rtype: str
        """
        return self._max_wait

    @max_wait.setter
    def max_wait(self, max_wait):
        """
        Sets the max_wait of this SearchResponse.

        :param max_wait: The max_wait of this SearchResponse.
        :type: str
        """
        if max_wait is None:
            raise ValueError("Invalid value for `max_wait`, must not be `None`")

        self._max_wait = max_wait

    @property
    def response_time(self):
        """
        Gets the response_time of this SearchResponse.

        :return: The response_time of this SearchResponse.
        :rtype: str
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """
        Sets the response_time of this SearchResponse.

        :param response_time: The response_time of this SearchResponse.
        :type: str
        """
        if response_time is None:
            raise ValueError("Invalid value for `response_time`, must not be `None`")

        self._response_time = response_time

    @property
    def results(self):
        """
        Gets the results of this SearchResponse.

        :return: The results of this SearchResponse.
        :rtype: list[Results]
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this SearchResponse.

        :param results: The results of this SearchResponse.
        :type: list[Results]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
