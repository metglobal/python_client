# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AvailabilityResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meal_type': 'str',
        'destination_code': 'str',
        'nonrefundable': 'bool',
        'offer': 'bool',
        'checkout': 'str',
        'price': 'str',
        'supports_cancellation': 'bool',
        'hotel_code': 'str',
        'currency': 'str',
        'hotel_currency': 'str',
        'hotel_price': 'str',
        'checkin': 'str',
        'rooms': 'list[Room]',
        'policies': 'list[Policy]',
        'view': 'bool',
        'minimum_selling_price': 'str',
        'additional_info': 'str',
        'pay_at_hotel': 'bool'
    }

    attribute_map = {
        'meal_type': 'meal_type',
        'destination_code': 'destination_code',
        'nonrefundable': 'nonrefundable',
        'offer': 'offer',
        'checkout': 'checkout',
        'price': 'price',
        'supports_cancellation': 'supports_cancellation',
        'hotel_code': 'hotel_code',
        'currency': 'currency',
        'hotel_currency': 'hotel_currency',
        'hotel_price': 'hotel_price',
        'checkin': 'checkin',
        'rooms': 'rooms',
        'policies': 'policies',
        'view': 'view',
        'minimum_selling_price': 'minimum_selling_price',
        'additional_info': 'additional_info',
        'pay_at_hotel': 'pay_at_hotel'
    }

    def __init__(self, meal_type=None, destination_code=None, nonrefundable=None, offer=None, checkout=None, price=None, supports_cancellation=None, hotel_code=None, currency=None, hotel_currency=None, hotel_price=None, checkin=None, rooms=None, policies=None, view=None, minimum_selling_price=None, additional_info=None, pay_at_hotel=None):
        """
        AvailabilityResponse - a model defined in Swagger
        """

        self._meal_type = None
        self._destination_code = None
        self._nonrefundable = None
        self._offer = None
        self._checkout = None
        self._price = None
        self._supports_cancellation = None
        self._hotel_code = None
        self._currency = None
        self._hotel_currency = None
        self._hotel_price = None
        self._checkin = None
        self._rooms = None
        self._policies = None
        self._view = None
        self._minimum_selling_price = None
        self._additional_info = None
        self._pay_at_hotel = None

        self.meal_type = meal_type
        self.destination_code = destination_code
        if nonrefundable is not None:
          self.nonrefundable = nonrefundable
        self.offer = offer
        self.checkout = checkout
        self.price = price
        self.supports_cancellation = supports_cancellation
        self.hotel_code = hotel_code
        self.currency = currency
        if hotel_currency is not None:
          self.hotel_currency = hotel_currency
        if hotel_price is not None:
          self.hotel_price = hotel_price
        self.checkin = checkin
        self.rooms = rooms
        self.policies = policies
        if view is not None:
          self.view = view
        if minimum_selling_price is not None:
          self.minimum_selling_price = minimum_selling_price
        if additional_info is not None:
          self.additional_info = additional_info
        self.pay_at_hotel = pay_at_hotel

    @property
    def meal_type(self):
        """
        Gets the meal_type of this AvailabilityResponse.

        :return: The meal_type of this AvailabilityResponse.
        :rtype: str
        """
        return self._meal_type

    @meal_type.setter
    def meal_type(self, meal_type):
        """
        Sets the meal_type of this AvailabilityResponse.

        :param meal_type: The meal_type of this AvailabilityResponse.
        :type: str
        """
        if meal_type is None:
            raise ValueError("Invalid value for `meal_type`, must not be `None`")

        self._meal_type = meal_type

    @property
    def destination_code(self):
        """
        Gets the destination_code of this AvailabilityResponse.

        :return: The destination_code of this AvailabilityResponse.
        :rtype: str
        """
        return self._destination_code

    @destination_code.setter
    def destination_code(self, destination_code):
        """
        Sets the destination_code of this AvailabilityResponse.

        :param destination_code: The destination_code of this AvailabilityResponse.
        :type: str
        """
        if destination_code is None:
            raise ValueError("Invalid value for `destination_code`, must not be `None`")

        self._destination_code = destination_code

    @property
    def nonrefundable(self):
        """
        Gets the nonrefundable of this AvailabilityResponse.

        :return: The nonrefundable of this AvailabilityResponse.
        :rtype: bool
        """
        return self._nonrefundable

    @nonrefundable.setter
    def nonrefundable(self, nonrefundable):
        """
        Sets the nonrefundable of this AvailabilityResponse.

        :param nonrefundable: The nonrefundable of this AvailabilityResponse.
        :type: bool
        """

        self._nonrefundable = nonrefundable

    @property
    def offer(self):
        """
        Gets the offer of this AvailabilityResponse.

        :return: The offer of this AvailabilityResponse.
        :rtype: bool
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """
        Sets the offer of this AvailabilityResponse.

        :param offer: The offer of this AvailabilityResponse.
        :type: bool
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")

        self._offer = offer

    @property
    def checkout(self):
        """
        Gets the checkout of this AvailabilityResponse.

        :return: The checkout of this AvailabilityResponse.
        :rtype: str
        """
        return self._checkout

    @checkout.setter
    def checkout(self, checkout):
        """
        Sets the checkout of this AvailabilityResponse.

        :param checkout: The checkout of this AvailabilityResponse.
        :type: str
        """
        if checkout is None:
            raise ValueError("Invalid value for `checkout`, must not be `None`")

        self._checkout = checkout

    @property
    def price(self):
        """
        Gets the price of this AvailabilityResponse.

        :return: The price of this AvailabilityResponse.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this AvailabilityResponse.

        :param price: The price of this AvailabilityResponse.
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def supports_cancellation(self):
        """
        Gets the supports_cancellation of this AvailabilityResponse.

        :return: The supports_cancellation of this AvailabilityResponse.
        :rtype: bool
        """
        return self._supports_cancellation

    @supports_cancellation.setter
    def supports_cancellation(self, supports_cancellation):
        """
        Sets the supports_cancellation of this AvailabilityResponse.

        :param supports_cancellation: The supports_cancellation of this AvailabilityResponse.
        :type: bool
        """
        if supports_cancellation is None:
            raise ValueError("Invalid value for `supports_cancellation`, must not be `None`")

        self._supports_cancellation = supports_cancellation

    @property
    def hotel_code(self):
        """
        Gets the hotel_code of this AvailabilityResponse.

        :return: The hotel_code of this AvailabilityResponse.
        :rtype: str
        """
        return self._hotel_code

    @hotel_code.setter
    def hotel_code(self, hotel_code):
        """
        Sets the hotel_code of this AvailabilityResponse.

        :param hotel_code: The hotel_code of this AvailabilityResponse.
        :type: str
        """
        if hotel_code is None:
            raise ValueError("Invalid value for `hotel_code`, must not be `None`")

        self._hotel_code = hotel_code

    @property
    def currency(self):
        """
        Gets the currency of this AvailabilityResponse.

        :return: The currency of this AvailabilityResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this AvailabilityResponse.

        :param currency: The currency of this AvailabilityResponse.
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def hotel_currency(self):
        """
        Gets the hotel_currency of this AvailabilityResponse.

        :return: The hotel_currency of this AvailabilityResponse.
        :rtype: str
        """
        return self._hotel_currency

    @hotel_currency.setter
    def hotel_currency(self, hotel_currency):
        """
        Sets the hotel_currency of this AvailabilityResponse.

        :param hotel_currency: The hotel_currency of this AvailabilityResponse.
        :type: str
        """

        self._hotel_currency = hotel_currency

    @property
    def hotel_price(self):
        """
        Gets the hotel_price of this AvailabilityResponse.

        :return: The hotel_price of this AvailabilityResponse.
        :rtype: str
        """
        return self._hotel_price

    @hotel_price.setter
    def hotel_price(self, hotel_price):
        """
        Sets the hotel_price of this AvailabilityResponse.

        :param hotel_price: The hotel_price of this AvailabilityResponse.
        :type: str
        """

        self._hotel_price = hotel_price

    @property
    def checkin(self):
        """
        Gets the checkin of this AvailabilityResponse.

        :return: The checkin of this AvailabilityResponse.
        :rtype: str
        """
        return self._checkin

    @checkin.setter
    def checkin(self, checkin):
        """
        Sets the checkin of this AvailabilityResponse.

        :param checkin: The checkin of this AvailabilityResponse.
        :type: str
        """
        if checkin is None:
            raise ValueError("Invalid value for `checkin`, must not be `None`")

        self._checkin = checkin

    @property
    def rooms(self):
        """
        Gets the rooms of this AvailabilityResponse.

        :return: The rooms of this AvailabilityResponse.
        :rtype: list[Room]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this AvailabilityResponse.

        :param rooms: The rooms of this AvailabilityResponse.
        :type: list[Room]
        """
        if rooms is None:
            raise ValueError("Invalid value for `rooms`, must not be `None`")

        self._rooms = rooms

    @property
    def policies(self):
        """
        Gets the policies of this AvailabilityResponse.

        :return: The policies of this AvailabilityResponse.
        :rtype: list[Policy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """
        Sets the policies of this AvailabilityResponse.

        :param policies: The policies of this AvailabilityResponse.
        :type: list[Policy]
        """
        if policies is None:
            raise ValueError("Invalid value for `policies`, must not be `None`")

        self._policies = policies

    @property
    def view(self):
        """
        Gets the view of this AvailabilityResponse.

        :return: The view of this AvailabilityResponse.
        :rtype: bool
        """
        return self._view

    @view.setter
    def view(self, view):
        """
        Sets the view of this AvailabilityResponse.

        :param view: The view of this AvailabilityResponse.
        :type: bool
        """

        self._view = view

    @property
    def minimum_selling_price(self):
        """
        Gets the minimum_selling_price of this AvailabilityResponse.

        :return: The minimum_selling_price of this AvailabilityResponse.
        :rtype: str
        """
        return self._minimum_selling_price

    @minimum_selling_price.setter
    def minimum_selling_price(self, minimum_selling_price):
        """
        Sets the minimum_selling_price of this AvailabilityResponse.

        :param minimum_selling_price: The minimum_selling_price of this AvailabilityResponse.
        :type: str
        """

        self._minimum_selling_price = minimum_selling_price

    @property
    def additional_info(self):
        """
        Gets the additional_info of this AvailabilityResponse.

        :return: The additional_info of this AvailabilityResponse.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this AvailabilityResponse.

        :param additional_info: The additional_info of this AvailabilityResponse.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def pay_at_hotel(self):
        """
        Gets the pay_at_hotel of this AvailabilityResponse.

        :return: The pay_at_hotel of this AvailabilityResponse.
        :rtype: bool
        """
        return self._pay_at_hotel

    @pay_at_hotel.setter
    def pay_at_hotel(self, pay_at_hotel):
        """
        Sets the pay_at_hotel of this AvailabilityResponse.

        :param pay_at_hotel: The pay_at_hotel of this AvailabilityResponse.
        :type: bool
        """
        if pay_at_hotel is None:
            raise ValueError("Invalid value for `pay_at_hotel`, must not be `None`")

        self._pay_at_hotel = pay_at_hotel

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AvailabilityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
