# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BookResponseConfirmationNumbers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confirmation_number': 'str',
        'names': 'list[str]',
        'rooms': 'list[BookResponseRooms]'
    }

    attribute_map = {
        'confirmation_number': 'confirmation_number',
        'names': 'names',
        'rooms': 'rooms'
    }

    def __init__(self, confirmation_number=None, names=None, rooms=None):
        """
        BookResponseConfirmationNumbers - a model defined in Swagger
        """

        self._confirmation_number = None
        self._names = None
        self._rooms = None

        if confirmation_number is not None:
          self.confirmation_number = confirmation_number
        if names is not None:
          self.names = names
        if rooms is not None:
          self.rooms = rooms

    @property
    def confirmation_number(self):
        """
        Gets the confirmation_number of this BookResponseConfirmationNumbers.

        :return: The confirmation_number of this BookResponseConfirmationNumbers.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """
        Sets the confirmation_number of this BookResponseConfirmationNumbers.

        :param confirmation_number: The confirmation_number of this BookResponseConfirmationNumbers.
        :type: str
        """

        self._confirmation_number = confirmation_number

    @property
    def names(self):
        """
        Gets the names of this BookResponseConfirmationNumbers.

        :return: The names of this BookResponseConfirmationNumbers.
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """
        Sets the names of this BookResponseConfirmationNumbers.

        :param names: The names of this BookResponseConfirmationNumbers.
        :type: list[str]
        """

        self._names = names

    @property
    def rooms(self):
        """
        Gets the rooms of this BookResponseConfirmationNumbers.

        :return: The rooms of this BookResponseConfirmationNumbers.
        :rtype: list[BookResponseRooms]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this BookResponseConfirmationNumbers.

        :param rooms: The rooms of this BookResponseConfirmationNumbers.
        :type: list[BookResponseRooms]
        """

        self._rooms = rooms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BookResponseConfirmationNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
