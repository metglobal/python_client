# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Pax(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adult_quantity': 'int',
        'children_ages': 'list[int]'
    }

    attribute_map = {
        'adult_quantity': 'adult_quantity',
        'children_ages': 'children_ages'
    }

    def __init__(self, adult_quantity=None, children_ages=None):
        """
        Pax - a model defined in Swagger
        """

        self._adult_quantity = None
        self._children_ages = None

        if adult_quantity is not None:
          self.adult_quantity = adult_quantity
        if children_ages is not None:
          self.children_ages = children_ages

    @property
    def adult_quantity(self):
        """
        Gets the adult_quantity of this Pax.

        :return: The adult_quantity of this Pax.
        :rtype: int
        """
        return self._adult_quantity

    @adult_quantity.setter
    def adult_quantity(self, adult_quantity):
        """
        Sets the adult_quantity of this Pax.

        :param adult_quantity: The adult_quantity of this Pax.
        :type: int
        """

        self._adult_quantity = adult_quantity

    @property
    def children_ages(self):
        """
        Gets the children_ages of this Pax.

        :return: The children_ages of this Pax.
        :rtype: list[int]
        """
        return self._children_ages

    @children_ages.setter
    def children_ages(self, children_ages):
        """
        Sets the children_ages of this Pax.

        :param children_ages: The children_ages of this Pax.
        :type: list[int]
        """

        self._children_ages = children_ages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Pax):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
