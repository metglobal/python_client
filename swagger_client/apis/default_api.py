# coding: utf-8

"""
    Hotelspro Api Client

    Hotelspro Api Client

    OpenAPI spec version: 2.0.0
    Contact: clientintegration@hotelspro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def availability_product_code_get(self, product_code, **kwargs):
        """
        Availability with Product Code
        Check Availability of Selected Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.availability_product_code_get(product_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_code: product code that returned in Search(or Hotel Availability) Response (required)
        :return: AvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.availability_product_code_get_with_http_info(product_code, **kwargs)
        else:
            (data) = self.availability_product_code_get_with_http_info(product_code, **kwargs)
            return data

    def availability_product_code_get_with_http_info(self, product_code, **kwargs):
        """
        Availability with Product Code
        Check Availability of Selected Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.availability_product_code_get_with_http_info(product_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_code: product code that returned in Search(or Hotel Availability) Response (required)
        :return: AvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method availability_product_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params) or (params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `availability_product_code_get`")


        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/availability/{product_code}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AvailabilityResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def book_provision_code_post(self, name, provision_code, **kwargs):
        """
        Book with Provision Code
        Returns Book Response
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.book_provision_code_post(name, provision_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] name: A person's name. (required)
        :param str provision_code: (required)
        :return: BookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.book_provision_code_post_with_http_info(name, provision_code, **kwargs)
        else:
            (data) = self.book_provision_code_post_with_http_info(name, provision_code, **kwargs)
            return data

    def book_provision_code_post_with_http_info(self, name, provision_code, **kwargs):
        """
        Book with Provision Code
        Returns Book Response
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.book_provision_code_post_with_http_info(name, provision_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] name: A person's name. (required)
        :param str provision_code: (required)
        :return: BookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'provision_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method book_provision_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `book_provision_code_post`")
        # verify the required parameter 'provision_code' is set
        if ('provision_code' not in params) or (params['provision_code'] is None):
            raise ValueError("Missing the required parameter `provision_code` when calling `book_provision_code_post`")


        collection_formats = {}

        path_params = {}
        if 'provision_code' in params:
            path_params['provision_code'] = params['provision_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
            collection_formats['name'] = 'multi'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/book/{provision_code}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BookResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bookings_booking_code_get(self, booking_code, **kwargs):
        """
        Get Booking Detail
        Returns past booking(s) data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bookings_booking_code_get(booking_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_code: This is the code that taken from the response of bookings request (required)
        :return: BookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bookings_booking_code_get_with_http_info(booking_code, **kwargs)
        else:
            (data) = self.bookings_booking_code_get_with_http_info(booking_code, **kwargs)
            return data

    def bookings_booking_code_get_with_http_info(self, booking_code, **kwargs):
        """
        Get Booking Detail
        Returns past booking(s) data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bookings_booking_code_get_with_http_info(booking_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_code: This is the code that taken from the response of bookings request (required)
        :return: BookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bookings_booking_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_code' is set
        if ('booking_code' not in params) or (params['booking_code'] is None):
            raise ValueError("Missing the required parameter `booking_code` when calling `bookings_booking_code_get`")


        collection_formats = {}

        path_params = {}
        if 'booking_code' in params:
            path_params['booking_code'] = params['booking_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/bookings/{booking_code}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BookResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bookings_get(self, **kwargs):
        """
        Get Booking List
        Returns past booking(s) data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bookings_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_date: This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD).
        :param str to_date: This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD).
        :param str format: Only JSON supported
        :return: BookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bookings_get_with_http_info(**kwargs)
        else:
            (data) = self.bookings_get_with_http_info(**kwargs)
            return data

    def bookings_get_with_http_info(self, **kwargs):
        """
        Get Booking List
        Returns past booking(s) data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bookings_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_date: This is the booking date for filtering the bookings from the from_date(YYYY-MM-DD).
        :param str to_date: This is the booking date for filtering the bookings until the to_date(YYYY-MM-DD).
        :param str format: Only JSON supported
        :return: BookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_date', 'to_date', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bookings_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_date' in params:
            query_params.append(('from_date', params['from_date']))
        if 'to_date' in params:
            query_params.append(('to_date', params['to_date']))
        if 'format' in params:
            query_params.append(('format', params['format']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/bookings/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BookingListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cancel_booking_code_post(self, booking_code, **kwargs):
        """
        Cancel Booking with Booking Code
        Cancel the Booking
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_booking_code_post(booking_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_code: Booking Code that returned in Book Response (required)
        :return: CancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_booking_code_post_with_http_info(booking_code, **kwargs)
        else:
            (data) = self.cancel_booking_code_post_with_http_info(booking_code, **kwargs)
            return data

    def cancel_booking_code_post_with_http_info(self, booking_code, **kwargs):
        """
        Cancel Booking with Booking Code
        Cancel the Booking
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_booking_code_post_with_http_info(booking_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str booking_code: Booking Code that returned in Book Response (required)
        :return: CancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_booking_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_code' is set
        if ('booking_code' not in params) or (params['booking_code'] is None):
            raise ValueError("Missing the required parameter `booking_code` when calling `cancel_booking_code_post`")


        collection_formats = {}

        path_params = {}
        if 'booking_code' in params:
            path_params['booking_code'] = params['booking_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/cancel/{booking_code}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CancelResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def hotel_availability_get(self, search_code, hotel_code, **kwargs):
        """
        Hotel Availability with Hotel Code and Search Code
        Check Availability of Selected Hotel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hotel_availability_get(search_code, hotel_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_code: search code that returned in search response (required)
        :param str hotel_code: requested hotel code (required)
        :return: HotelAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hotel_availability_get_with_http_info(search_code, hotel_code, **kwargs)
        else:
            (data) = self.hotel_availability_get_with_http_info(search_code, hotel_code, **kwargs)
            return data

    def hotel_availability_get_with_http_info(self, search_code, hotel_code, **kwargs):
        """
        Hotel Availability with Hotel Code and Search Code
        Check Availability of Selected Hotel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hotel_availability_get_with_http_info(search_code, hotel_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_code: search code that returned in search response (required)
        :param str hotel_code: requested hotel code (required)
        :return: HotelAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_code', 'hotel_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hotel_availability_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_code' is set
        if ('search_code' not in params) or (params['search_code'] is None):
            raise ValueError("Missing the required parameter `search_code` when calling `hotel_availability_get`")
        # verify the required parameter 'hotel_code' is set
        if ('hotel_code' not in params) or (params['hotel_code'] is None):
            raise ValueError("Missing the required parameter `hotel_code` when calling `hotel_availability_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_code' in params:
            query_params.append(('search_code', params['search_code']))
        if 'hotel_code' in params:
            query_params.append(('hotel_code', params['hotel_code']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/hotel-availability/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HotelAvailabilityResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def provision_product_code_post(self, product_code, **kwargs):
        """
        Provision with Product Code
        Provision of Selected Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.provision_product_code_post(product_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_code: product code that returned in Search(or Hotel Availability) Response (required)
        :return: ProvisionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.provision_product_code_post_with_http_info(product_code, **kwargs)
        else:
            (data) = self.provision_product_code_post_with_http_info(product_code, **kwargs)
            return data

    def provision_product_code_post_with_http_info(self, product_code, **kwargs):
        """
        Provision with Product Code
        Provision of Selected Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.provision_product_code_post_with_http_info(product_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_code: product code that returned in Search(or Hotel Availability) Response (required)
        :return: ProvisionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method provision_product_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params) or (params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `provision_product_code_post`")


        collection_formats = {}

        path_params = {}
        if 'product_code' in params:
            path_params['product_code'] = params['product_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/provision/{product_code}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvisionResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_post(self, pax, checkin, checkout, client_nationality, currency, **kwargs):
        """
        Search with Hotel Code(Hotel Code List) or Destination Code or Geolocation
        Returns list of products
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_post(pax, checkin, checkout, client_nationality, currency, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] pax: Number of pax (required)
        :param str checkin: Checkin (required)
        :param str checkout: Checkout (required)
        :param str client_nationality: Client Nationality (required)
        :param str currency: Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
        :param str hotel_code: Requested Hotel Code
        :param str destination_code: Requested Destination Code
        :param str lat: Requested Latitude Code(lat, lon and radius should be given together)
        :param str lon: Requested Longitude Code(lat, lon and radius should be given together)
        :param str radius: Requested Radius Code(lat, lon and radius should be given together)
        :param int max_product: Max Product
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_post_with_http_info(pax, checkin, checkout, client_nationality, currency, **kwargs)
        else:
            (data) = self.search_post_with_http_info(pax, checkin, checkout, client_nationality, currency, **kwargs)
            return data

    def search_post_with_http_info(self, pax, checkin, checkout, client_nationality, currency, **kwargs):
        """
        Search with Hotel Code(Hotel Code List) or Destination Code or Geolocation
        Returns list of products
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_post_with_http_info(pax, checkin, checkout, client_nationality, currency, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] pax: Number of pax (required)
        :param str checkin: Checkin (required)
        :param str checkout: Checkout (required)
        :param str client_nationality: Client Nationality (required)
        :param str currency: Currency (Supported Currencies USD, EUR, GBP, TRY) (required)
        :param str hotel_code: Requested Hotel Code
        :param str destination_code: Requested Destination Code
        :param str lat: Requested Latitude Code(lat, lon and radius should be given together)
        :param str lon: Requested Longitude Code(lat, lon and radius should be given together)
        :param str radius: Requested Radius Code(lat, lon and radius should be given together)
        :param int max_product: Max Product
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pax', 'checkin', 'checkout', 'client_nationality', 'currency', 'hotel_code', 'destination_code', 'lat', 'lon', 'radius', 'max_product']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pax' is set
        if ('pax' not in params) or (params['pax'] is None):
            raise ValueError("Missing the required parameter `pax` when calling `search_post`")
        # verify the required parameter 'checkin' is set
        if ('checkin' not in params) or (params['checkin'] is None):
            raise ValueError("Missing the required parameter `checkin` when calling `search_post`")
        # verify the required parameter 'checkout' is set
        if ('checkout' not in params) or (params['checkout'] is None):
            raise ValueError("Missing the required parameter `checkout` when calling `search_post`")
        # verify the required parameter 'client_nationality' is set
        if ('client_nationality' not in params) or (params['client_nationality'] is None):
            raise ValueError("Missing the required parameter `client_nationality` when calling `search_post`")
        # verify the required parameter 'currency' is set
        if ('currency' not in params) or (params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `search_post`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pax' in params:
            query_params.append(('pax', params['pax']))
            collection_formats['pax'] = 'multi'
        if 'checkin' in params:
            query_params.append(('checkin', params['checkin']))
        if 'checkout' in params:
            query_params.append(('checkout', params['checkout']))
        if 'client_nationality' in params:
            query_params.append(('client_nationality', params['client_nationality']))
        if 'currency' in params:
            query_params.append(('currency', params['currency']))
        if 'destination_code' in params:
            query_params.append(('destination_code', params['destination_code']))
        if 'lat' in params:
            query_params.append(('lat', params['lat']))
        if 'lon' in params:
            query_params.append(('lon', params['lon']))
        if 'radius' in params:
            query_params.append(('radius', params['radius']))
        if 'max_product' in params:
            query_params.append(('max_product', params['max_product']))

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'hotel_code' in params:
            form_params.append(('hotel_code', params['hotel_code']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/search/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
